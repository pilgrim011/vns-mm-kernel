/** ****************************************************************************

                    Huawei Technologies Sweden AB (C), 2001-2015

 ********************************************************************************
 * @author    Automatically generated by DAISY
 * @version
 * @date      2015-09-24
 * @file
 * @brief
 * @copyright Huawei Technologies Sweden AB
 *******************************************************************************/
#ifndef CSDR1XTAS_H
#define CSDR1XTAS_H

/*******************************************************************************
 1. Other files included
*******************************************************************************/

#include "uphy_type_define.h"
#include "csdr1x.h"

#ifdef __cplusplus
#if __cplusplus
    extern "C" {
#endif /* __cpluscplus */
#endif /* __cpluscplus */
#pragma pack(4)

/*******************************************************************************
 2. Macro definitions
*******************************************************************************/
#define INVALID_RSCP_VALUE                  0x7FFF

/*******************************************************************************
 3. Enumerations declarations
*******************************************************************************/

/** ****************************************************************************
 * Name        : CSDR1XTAS_MSG_TYPE_ENUM_UINT16
 *
 * Description :
 *******************************************************************************/
enum CSDR1XTAS_MSG_TYPE_ENUM
{
    ID_CTAS_CSDR_1X_SET_DPDT_REQ        = 0x00E0, /**< @sa CTAS_CSDR_1X_SET_DPDT_REQ_STRU */
    ID_CSDR_CTAS_1X_SET_DPDT_CNF        = 0x00E1, /**< @sa CSDR_CTAS_1X_SET_DPDT_CNF_STRU */
    ID_CTAS_CSDR_1X_TAS_START_REQ       = 0x00E2, /**< @sa CTAS_CSDR_1X_TAS_START_REQ_STRU */
    ID_CSDR_CTAS_1X_TAS_START_CNF       = 0x00E3, /**< @sa CSDR_CTAS_1X_TAS_START_CNF_STRU */
    ID_CSDR_CTAS_1X_TX_BLANKING_IND     = 0x00E4, /**< @sa CSDR_CTAS_1X_TX_BLANKING_IND_STRU */
    ID_CSDR1XTAS_MSG_TYPE_ENUM_BUTT     = 0x00E5
};
typedef PHY_UINT16 CSDR1XTAS_MSG_TYPE_ENUM_UINT16;

/** ****************************************************************************
 * Name        : CSDR_1X_TAS_STATE_ENUM_UINT16
 *
 * Description :
 *******************************************************************************/
enum CSDR_1X_TAS_STATE_ENUM
{
    CSDR_1X_TAS_STATE_OTHER             = 0x0000,
    CSDR_1X_TAS_STATE_TCH_T1            = 0x0001,
    CSDR_1X_TAS_STATE_TCH_T2            = 0x0002,
    CSDR_1X_TAS_STATE_BUTT              = 0x0003
};
typedef PHY_UINT16 CSDR_1X_TAS_STATE_ENUM_UINT16;

/** ****************************************************************************
 * Name        : CSDR_1X_SWITCH_STATE_ENUM_UINT16
 *
 * Description : CSDR_1X_SWITCH_STATE_ENUM_UINT16 tells the state of the DPDT
 * switch. It can be used to order a L1 to put the switch in a specific
 * position.
 *******************************************************************************/
enum CSDR_1X_SWITCH_STATE_ENUM
{
    CSDR_1X_SWITCH_STATE_STRAIGHT       = 0x0000,
    CSDR_1X_SWITCH_STATE_CROSSED        = 0x0001,
    CSDR_1X_SWITCH_STATE_CHANGE         = 0x0002,
    CSDR_1X_SWITCH_STATE_BUTT           = 0x0003
};
typedef PHY_UINT16 CSDR_1X_SWITCH_STATE_ENUM_UINT16;

/*******************************************************************************
 4. Message Header declaration
*******************************************************************************/

/*******************************************************************************
 5. Message declaration
*******************************************************************************/

/*******************************************************************************
 6. STRUCT and UNION declaration
*******************************************************************************/

/*******************************************************************************
 7. OTHER declarations
*******************************************************************************/

/** ****************************************************************************
 * Name        : CTAS_CSDR_1X_SET_DPDT_REQ_STRU
 *
 * Description : CTAS_CSDR_1X_SET_DPDT_REQ orders CSDR to change the DPDT
 * switch position.
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    CSDR1XTAS_MSG_TYPE_ENUM_UINT16      enMsgId;
    PHY_UINT16                          uhwOpId;
    CSDR_1X_SWITCH_STATE_ENUM_UINT16    enSwitchState;
    CSDR_1X_BOOL_ENUM_UINT16            enImmediately; /**< TRUE: switch immediately FALSE: switch at next RxOn */
    CSDR_1X_TAS_STATE_ENUM_UINT16       enState;       /**< The state in which the switch takes place */
    CSDR_1X_BOOL_ENUM_UINT16            enNeedOccupy;  /**< TRUE: CSDR need occupy the antanna, FALSE: don't need */
} CTAS_CSDR_1X_SET_DPDT_REQ_STRU;

/** ****************************************************************************
 * Name        : CSDR_CTAS_1X_SET_DPDT_CNF_STRU
 *
 * Description : CSDR_CTAS_1X_SET_DPDT_CNF is sent from CSDR when the antenna
 * switch has been set in the requested position. The signal carries no
 * parameters.
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    CSDR1XTAS_MSG_TYPE_ENUM_UINT16      enMsgId;
    PHY_UINT16                          uhwOpId;
} CSDR_CTAS_1X_SET_DPDT_CNF_STRU;

/** ****************************************************************************
 * Name        : CTAS_CSDR_1X_TAS_START_REQ_STRU
 *
 * Description : CTAS_CSDR_1X_TAS_START_REQ is sent to CSDR to request start
 * and stop of TAS. TAS is started and stopped in CSDR in ACCESS state only.
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    CSDR1XTAS_MSG_TYPE_ENUM_UINT16      enMsgId;
    PHY_UINT16                          uhwOpId;
    CSDR_1X_BOOL_ENUM_UINT16            enStart;     /**< TRUE: Start TAS. FALSE: stop TAS */
    PHY_UINT16                          uhwReserved; /**< 32 bit alignment */
} CTAS_CSDR_1X_TAS_START_REQ_STRU;

/** ****************************************************************************
 * Name        : CSDR_CTAS_1X_TAS_START_CNF_STRU
 *
 * Description : CSDR_CTAS_1X_TAS_START_CNF is sent from CSDR when TAS has been
 * started or stopped according to the request. The signal carries no
 * parameters.
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    CSDR1XTAS_MSG_TYPE_ENUM_UINT16      enMsgId;
    PHY_UINT16                          uhwOpId;
} CSDR_CTAS_1X_TAS_START_CNF_STRU;

/** ****************************************************************************
 * Name        : CSDR_CTAS_1X_TX_BLANKING_IND_STRU
 *
 * Description : CSDR_CTAS_1X_TX_BLANKING_IND is sent from CSDR to CTAS each
 * time the position of the DPDT switch is to be changed. The signal carries
 * the new switch position.
 *******************************************************************************/
typedef struct
{
    VOS_MSG_HEADER
    CSDR1XTAS_MSG_TYPE_ENUM_UINT16      enMsgId;
    PHY_UINT16                          uhwOpId;
    CSDR_1X_SWITCH_STATE_ENUM_UINT16    enSwitchState;
    PHY_UINT16                          uhwReserved;   /**< 32 bit alignment */
    PHY_UINT32                          uwStartSlice;
    PHY_UINT32                          uwStopSlice;
} CSDR_CTAS_1X_TX_BLANKING_IND_STRU;

/*******************************************************************************
 8. Global  declaration
*******************************************************************************/

/*******************************************************************************
 9. Function declarations
*******************************************************************************/

#if ((VOS_OS_VER == VOS_WIN32) || (VOS_OS_VER == VOS_NUCLEUS))
#pragma pack()
#else
#pragma pack(0)
#endif

#ifdef __cplusplus
#if __cplusplus
}
#endif /* __cpluscplus */
#endif /* __cpluscplus */

#endif
